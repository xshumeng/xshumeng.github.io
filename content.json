[{"title":"ASCII TO CHAR 简单实现","date":"2017-07-18T14:04:14.000Z","path":"2017/07/18/AsciiToChar/","text":"在Erlang开发时常常会看到Terminal里一串串的数字（ASCII），且这些数字对应的字符对异常排查等有很大的作用。而堡垒机不好随意做查看日志外的其他操作。故此，简单实现ASCII TO CHAR小应用来解决这个问题。此实现不支持中文。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt; &lt;title&gt;ASCII TO CHAR&lt;/title&gt; &lt;style type=\"text/css\"&gt; .nav&#123; margin:0 auto; margin-top:100px; width:1000px; height:500px; &#125; .src_div&#123; width:500px; height:400px; float:left; &#125; .dst_div&#123; width:500px; height:400px; float:left; &#125; .src&#123; width:500px; height:400px; &#125; .dst&#123; width:500px; height:400px; &#125; .btn&#123; margin-top:30px; margin-left:440px; &#125; &lt;/style&gt; &lt;script language=\"javascript\" type=\"text/javascript\"&gt; function ascii2char() &#123; // 获取要转义的字符 var src = document.getElementById('src').value; // 正则用以匹配需转义字符中的所有数字 var patter = /\\d+/g; // 正则。。。 var arr = src.match(patter); // temp::拼接字符串 var temp = []; for(var i in arr) &#123; if(arr[i] &lt; 32 || arr[i] &gt; 126) temp.push(\".\"); else temp.push(String.fromCharCode(arr[i])); &#125; document.getElementById(\"dst\").value=temp.join(''); &#125; // 初始化页面（清空输入框的内容） function init() &#123; document.getElementById(\"dst\").value = \"\"; document.getElementById(\"src\").value = \"\"; document.getElementById(\"src\").select(); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body onload=\"init()\"&gt; &lt;div class=\"nav\"&gt; &lt;div class=\"src_div\"&gt; &lt;textarea class=\"src\" id=\"src\"&gt; &lt;/textarea&gt; &lt;/div&gt; &lt;div class=\"dst_div\"&gt; &lt;textarea readonly=\"readonly\" class=\"dst\" id=\"dst\"&gt; &lt;/textarea&gt; &lt;/div&gt; &lt;input class=\"btn\" type=\"button\" value=\"Ascii To Char\" onclick=\"ascii2char()\"/&gt; &lt;input class=\"clean\" type=\"button\" value=\"Clean\" onclick=\"init()\"&gt; &lt;p&gt;注： 此程序将转换32-126之间的ASCII可打印字符，其他字符使用英文“.”号代替&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","tags":[{"name":"ASCII TO CHAR","slug":"ASCII-TO-CHAR","permalink":"//litten.me/tags/ASCII-TO-CHAR/"}]},{"title":"BASE64 简单实现","date":"2017-07-18T13:01:57.000Z","path":"2017/07/18/Base64/","text":"本文以C语言和JavaScript语言来实现BASE64编码和解码的简单功能，目的只是实践BASE64的编解码功能。两种实现均不支持中文的编解码。其中JavaScript实现可在本站的Tools处找到并使用。 C语言版实现base64.c123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121/* * Copyright(C), 2016, Simon. * File name : base64.c * Author : Simon * E-Mail : xue.shumeng@yahoo.com * Version : 0.1.0 * Date : Wed Apr 13 08:38:35 2016 * Description : 简单实现Base64加解密 * Function List : encode/3 * History : None */#include &lt;string.h&gt;#include \"base64.h\"/* Base64 编码字符集 */char enchar[64] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";/* Base64 解码字符集 */int de[256] = &#123; -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 0 - 15 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 16 - 31 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, // 32 - 47 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, // 48 - 63 -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, // 64 - 79 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, // 80 - 95 -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, // 96 - 111 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, // 112 - 127 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 128 - 143 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 144 - 159 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 160 - 175 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 176 - 191 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 192 - 207 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 208 - 223 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 224 - 239 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 240 - 255&#125;;/* * Function : encode * Description : 简单实现Base编码 * Calls : None * Called By : main * Input : const char *input :: 被编码字符 * const size_t length :: 被编码字符长度 * char *output :: 输出指针 * Output : char *outpt :: 输出已编码的字符指针 * Return : void * Others : None */void encode(const char *input, char *output)&#123; *output = '\\0'; size_t len = strlen(input); if(input == NULL || len &lt;= 0) return; char *in = (char *)input; /* 输入字符 */ char *out = (char *)output; /* 输出字符 */ char *end = (char *)input + len; /* 结束地址 */ /* * 掩码 * 0x30 0011 0000 * 0x3c 0011 1100 * 0x3f 0011 1111 */ while(end - in &gt;= 3) &#123; /* 每次处理三个字节 */ *out++ = enchar[(in[0] &gt;&gt; 2)]; *out++ = enchar[(in[0] &lt;&lt; 4 &amp; 0x30) | (in[1] &gt;&gt; 4)]; *out++ = enchar[(in[1] &lt;&lt; 2 &amp; 0x3c) | (in[2] &gt;&gt; 6)]; *out++ = enchar[in[2] &amp; 0x3f]; in += 3; &#125; /* 不足3个字节时 */ if(end - in &gt; 0) &#123; *out++ = enchar[(in[0] &gt;&gt; 2)]; if(end - in == 2) &#123; *out++ = enchar[(in[0] &lt;&lt; 4 &amp; 0x30) | (in[1] &gt;&gt; 4)]; *out++ = enchar[(in[1] &lt;&lt; 2) &amp; 0x3c]; *out++ = '='; &#125;else if(end - in == 1) &#123; *out++ = enchar[(in[0] &lt;&lt; 4) &amp; 0x30]; *out++ = '='; *out++ = '='; &#125; &#125;&#125;void decode(const char *input, char *output)&#123; if(input == NULL || output == NULL) return; size_t len = strlen(input); if(len &lt; 4 || len % 4 != 0) return; char *in = (char *)input; char *out = (char *)output; char *end = (char *)input + len; /* * 掩码 * 0xFC 1111 1100 */ for(;in &lt; end; in += 4) &#123; *out++ = ((de[in[0]] &lt;&lt; 2) &amp; 0xFC) | ((de[in[1]] &gt;&gt; 4) &amp; 0x03); *out++ = ((de[in[1]] &lt;&lt; 4) &amp; 0xF0) | ((de[in[2]] &gt;&gt; 2) &amp; 0x0F); *out++ = ((de[in[2]] &lt;&lt; 6) &amp; 0xC0) | de[in[3]]; &#125; if(*(end - 2) == '=') &#123; *(out - 2) = '\\0'; &#125; else if(*(end - 1) == '=') &#123; *(out - 1) = '\\0'; &#125;&#125; base64.h1234567891011121314151617181920/* * Copyright(C), 2016, Simon. * File name : base64.h * Author : Simon * E-Mail : xue.shumeng@yahoo.com * Version : 0.1.0 * Date : Thu Apr 21 16:41:52 2016 * Description : 简单Base64编码、解码头文件 * Function List : None * History : None */#ifndef BASE#define BASE/* 函数声明 */void encode(const char *input, char *output);void decode(const char *input, char *output);#endif encode.c123456789101112131415161718192021#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;#include &lt;errno.h&gt;#include \"base64.h\"int main(int argc, char *argv[])&#123; if(argc == 1) &#123; errno = EINVAL; perror(\"UNKNOW ARG\"); exit(EINVAL); &#125; char *uncode = argv[1]; char *encoded; encoded = malloc(strlen(uncode) * 4 / 3); encode(uncode,encoded); printf(\"Encode : %s\\n\",encoded); exit(0);&#125; decode.c1234567891011121314151617181920212223#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;#include &lt;errno.h&gt;#include \"base64.h\"int main(int argc, char *argv[])&#123; if(argc == 1) &#123; errno = EINVAL; perror(\"UNKNOW ARG\"); exit(EINVAL); &#125; char *input = argv[1]; char *decoded; size_t len = strlen(input); decoded = malloc(len * 4 / 3); decode(input,decoded); printf(\"Decode : %s\\n\",decoded); exit(0);&#125; JavaScript实现base64.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt; &lt;title&gt;Encode And Decode Base64&lt;/title&gt; &lt;style type=\"text/css\"&gt; .nav&#123; margin:0 auto; margin-top:100px; width:1000px; height:500px; &#125; .src_div&#123; width:500px; height:400px; float:left; &#125; .dst_div&#123; width:500px; height:400px; float:left; &#125; .src&#123; width:500px; height:400px; &#125; .dst&#123; width:500px; height:400px; &#125; .de&#123; width:100px; margin-top:30px; margin-left:360px; &#125; .en&#123; width:100px; margin-top:0px; &#125; .clean&#123; width:100px; &#125; &lt;/style&gt; &lt;script language=\"javascript\" type=\"text/javascript\"&gt; // 初始化页面（清空所有文本框） function init() &#123; document.getElementById(\"dst\").value = \"\"; document.getElementById(\"src\").value = \"\"; document.getElementById(\"src\").select(); &#125; // Encode Charset var encodeCharset = ['A','B','C','D','E','F','G','H','I','J','K','L','M', 'N','O','P','Q','R','S','T','U','V','W','X','Y','Z', 'a','b','c','d','e','f','g','h','i','j','k','l','m', 'n','o','p','q','r','s','t','u','v','w','x','y','z', '0','1','2','3','4','5','6','7','8','9','+','/']; // Decode Charset var decodeCharset = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 000 - 015 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 016 - 031 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, // 032 - 047 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, // 048 - 063 -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, // 064 - 079 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, // 080 - 095 -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, // 096 - 111 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, // 112 - 127 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 128 - 143 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 144 - 159 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 160 - 175 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 176 - 191 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 192 - 207 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 208 - 223 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 224 - 239 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,]; // 240 - 255 function encode() &#123; var src = document.getElementById(\"src\").value; var arr = src.split(\"\"); var len = end = arr.length; /* * 掩码 * 0x3F 0011 1111 * 0x30 0011 0000 * 0x0F 0000 1111 * 0x3e 0011 1100 */ var dstArr = []; for(var i = 0; i &lt; len; i+=3) &#123; if(end - i == 1) &#123; dstArr.push(encodeCharset[(arr[i].charCodeAt() &gt;&gt; 2 &amp; 0x3f)]); dstArr.push(encodeCharset[(arr[i].charCodeAt() &lt;&lt; 4 &amp; 0x30)]); dstArr.push('='); dstArr.push('='); break; &#125; if(end - i == 2) &#123; dstArr.push(encodeCharset[(arr[i].charCodeAt() &gt;&gt; 2 &amp; 0x3f)]); dstArr.push(encodeCharset[(arr[i].charCodeAt() &lt;&lt; 4 &amp; 0x30) | (arr[i+1].charCodeAt() &gt;&gt; 4 &amp; 0x0f)]); dstArr.push(encodeCharset[(arr[i+1].charCodeAt() &lt;&lt; 2 &amp; 0x3e)]); dstArr.push('='); break; &#125; dstArr.push(encodeCharset[((arr[i+0].charCodeAt() &gt;&gt; 2) &amp; 0x3f)]); dstArr.push(encodeCharset[((arr[i+0].charCodeAt() &lt;&lt; 4) &amp; 0x30) | ((arr[i+1].charCodeAt() &gt;&gt; 4) &amp; 0x0f)]); dstArr.push(encodeCharset[(arr[i+1].charCodeAt() &lt;&lt; 2 &amp; 0x3e) | (arr[i+2].charCodeAt() &gt;&gt; 6 &amp; 0x03)]); dstArr.push(encodeCharset[(arr[i+2].charCodeAt() &amp; 0x3f)]); &#125; document.getElementById(\"dst\").value = dstArr.join(''); &#125; function decode() &#123; var src = document.getElementById(\"src\").value; var arr = src.split(\"\"); var len = end = arr.length; /* * 掩码 * 0x3F 0011 1111 * 0x30 0011 0000 * 0x0F 0000 1111 * 0x3e 0011 1100 */ var dstArr = []; if(len % 4 != 0 || len &lt; 4) return; for(var i = 0; i &lt; len; i += 4) &#123; //alert(i); dstArr.push(String.fromCharCode((decodeCharset[arr[i].charCodeAt()] &lt;&lt; 2 &amp; 0xFE) | (decodeCharset[arr[i+1].charCodeAt()] &gt;&gt; 4 &amp; 0x03))); dstArr.push(String.fromCharCode((decodeCharset[arr[i+1].charCodeAt()] &lt;&lt; 4 &amp; 0xF0) | (decodeCharset[arr[i+2].charCodeAt()] &gt;&gt; 2 &amp; 0x0F))); dstArr.push(String.fromCharCode((decodeCharset[arr[i+2].charCodeAt()] &lt;&lt; 6 &amp; 0xE0) | (decodeCharset[arr[i+3].charCodeAt()] &amp; 0x3F))); &#125; if(arr[len - 2] == '=') &#123; dstArr.pop(); &#125; if(arr[len - 1] == '=') dstArr.pop(); document.getElementById(\"dst\").value = dstArr.join(''); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body onload=\"init()\"&gt; &lt;div class=\"nav\"&gt; &lt;div class=\"src_div\"&gt; &lt;textarea class=\"src\" id=\"src\"&gt; &lt;/textarea&gt; &lt;/div&gt; &lt;div class=\"dst_div\"&gt; &lt;textarea readonly=\"readonly\" class=\"dst\" id=\"dst\"&gt; &lt;/textarea&gt; &lt;/div&gt; &lt;input class=\"de\" type=\"button\" value=\"Encode\" onclick=\"encode()\"/&gt; &lt;input class=\"en\" type=\"button\" value=\"Decode\" onclick=\"decode()\"/&gt; &lt;input class=\"clean\" type=\"button\" value=\"Clean\" onclick=\"init()\"&gt; &lt;p&gt;注： 此程序仅支持ASCII字符编解码&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","tags":[{"name":"BASE64","slug":"BASE64","permalink":"//litten.me/tags/BASE64/"}]},{"title":"TOOLS","date":"2017-07-17T12:40:58.000Z","path":"2017/07/17/tools/","text":"点击链接跳转至响应工具页面 ASCII TO CHAR BASE64","tags":[{"name":"TOOLS","slug":"TOOLS","permalink":"//litten.me/tags/TOOLS/"}]}]